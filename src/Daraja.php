<?php

namespace danvick\daraja;

use danvick\daraja\requests\C2B;
use danvick\daraja\requests\STK;
use Yii;
use yii\base\BaseObject;
use yii\base\Component;
use yii\base\Exception;
use yii\base\InvalidConfigException;
use yii\helpers\Json;
use yii\helpers\VarDumper;
use yii\httpclient\Client;

/**
 *
 * @property-read Client $httpClient
 * @property-read C2B $c2b
 * @property-read STK $stk
 */
class Daraja extends BaseObject
{
    /**
     * Safaricom MPESA APIs application consumer key.
     *
     * @var string
     */
    public $consumerKey;

    /**
     * Safaricom MPESA APIs application consumer secret.
     *
     * @var string
     */
    public $consumerSecret;

    public $shortCode;

    public $mode = 'sandbox';

    /**
     * Access token generated by Safaricom MPESA APIs.
     *
     * @var string
     */
    protected $accessToken;

    /**
     * Base URL end points for the Safaricom APIs.
     *
     * @var array
     */
    protected $baseUrl = [
        'sandbox' => 'https://sandbox.safaricom.co.ke',
        'live' => 'https://api.safaricom.co.ke',
    ];

    /**
     * @throws InvalidConfigException
     */
    public function init()
    {
        parent::init();
        // Validate keys
        if (empty($this->consumerKey)) {
            throw new InvalidConfigException('Consumer key has not been set.');
        }
        if (empty($this->consumerSecret)) {
            throw new InvalidConfigException('Consumer secret has not been set');
        }
    }

    /**
     * Initialize a customer to business transaction.
     *
     * @return C2B
     */
    public function getC2b(): C2B
    {
        return new C2B();
    }

    /**
     * Initiate a LIPA NA MPESA ONLINE transaction using STK push.
     *
     * @return STK
     */
    public function getStk(): STK
    {
        return new STK();
    }

    /**
     * @return Client
     */
    public function getHttpClient(): Client
    {
        return new Client([
            'baseUrl' => $this->baseUrl[$this->mode],
            'requestConfig' => [
                'format' => Client::FORMAT_JSON
            ],
            'responseConfig' => [
                'format' => Client::FORMAT_JSON
            ],
        ]);
    }

    /**
     * Get access token from Safaricom MPESA APIs.
     *
     * @return void
     * @throws Exception
     * @throws InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    protected function fetchAccessToken()
    {
        // Set the auth option
        $accessTokenDetails = $this->call('oauth/v1/generate?grant_type=client_credentials', 'GET', null, $headers = [
            'Authorize' => base64_encode("$this->consumerKey:$this->consumerSecret"),
        ]);
        $this->accessToken = $accessTokenDetails->access_token;
    }

    /**
     * Make API calls to Safaricom MPESA APIs.
     *
     * @param string $url
     * @param string $method
     * @param array|null $data
     * @param array|null $headers
     * @return mixed|null
     * @throws Exception
     * @throws InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    protected function call(string $url, string $method = 'POST', array $data = null, array $headers = null)
    {
        $request = $this->httpClient->createRequest()
            ->setUrl($url)
            ->setMethod($method);
        if (isset($this->accessToken)) {
            $request->addHeaders(['Authorization' => 'Bearer ' . $this->accessToken]);
        }
        if ($data) {
            $request->setData($data);
        }
        if ($headers) {
            $request->addHeaders($headers);
        }
        $response = $request->send();
        $responseContent = Json::decode($response->content, true);
        if (!$response->isOk) {
            Yii::error("RESPONSE ERROR: " . VarDumper::dumpAsString($responseContent) . " \nREQUEST DATA: " . VarDumper::dumpAsString($data));
            throw new Exception($responseContent['message']);
        }
        return $responseContent;
    }
}

