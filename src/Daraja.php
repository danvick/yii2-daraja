<?php

namespace danvick\daraja;

use danvick\daraja\requests\C2B;
use danvick\daraja\requests\STK;
use Yii;
use yii\base\Component;
use yii\base\Exception;
use yii\base\InvalidConfigException;
use yii\helpers\Json;
use yii\helpers\VarDumper;
use yii\httpclient\Client;

/**
 *
 * @property-read Client $httpClient
 * @property-read C2B $c2b
 * @property-write string $commandId
 * @property-read STK $stk
 */
class Daraja extends Component
{
    /**
     * Safaricom MPESA APIs application consumer key.
     *
     * @var string
     */
    public $consumerKey;

    /**
     * Safaricom MPESA APIs application consumer secret.
     *
     * @var string
     */
    public $consumerSecret;

    public $shortCode;

    public $mode = 'sandbox';

    /**
     * Access token generated by Safaricom MPESA APIs.
     *
     * @var string
     */
    protected $accessToken;

    /**
     * Base URL end points for the Safaricom APIs.
     *
     * @var array
     */
    protected $baseUrl = [
        'sandbox' => 'https://sandbox.safaricom.co.ke',
        'live' => 'https://api.safaricom.co.ke',
    ];

    /**
     * @throws InvalidConfigException
     */
    public function init()
    {
        parent::init();
        // Validate keys
        if (empty($this->consumerKey)) {
            throw new InvalidConfigException('Consumer key has not been set.');
        }
        if (empty($this->consumerSecret)) {
            throw new InvalidConfigException('Consumer secret has not been set');
        }
    }

    /**
     * Initialize a customer to business transaction.
     *
     * @return C2B
     */
    public function getC2b(): C2B
    {
        return new C2B();
    }

    /**
     * Initiate a LIPA NA MPESA ONLINE transaction using STK push.
     *
     * @return STK
     */
    public function getStk(): STK
    {
        return new STK();
    }

    /**
     * @return Client
     */
    public function getHttpClient(): Client
    {
        return new Client([
            'baseUrl' => $this->baseUrl[$this->mode],
            'requestConfig' => [
                'format' => Client::FORMAT_JSON
            ],
            'responseConfig' => [
                'format' => Client::FORMAT_JSON
            ],
        ]);
    }

    /**
     * Get access token from Safaricom MPESA APIs.
     *
     * @return void
     * @throws Exception
     * @throws InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    protected function fetchAccessToken()
    {
        // Set the auth option
        $accessTokenDetails = $this->call('oauth/v1/generate?grant_type=client_credentials', 'GET', null, $headers = [
            'Authorization' => "Basic " . base64_encode("$this->consumerKey:$this->consumerSecret"),
        ]);
        echo VarDumper::dumpAsString($accessTokenDetails);
        $this->accessToken = $accessTokenDetails['access_token'];
    }

    /**
     * Make API calls to Safaricom MPESA APIs.
     *
     * @param string $url
     * @param string $method
     * @param array|null $data
     * @param array|null $headers
     * @return mixed|null
     * @throws Exception
     * @throws InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    protected function call(string $url, string $method = 'POST', array $data = null, array $headers = null)
    {
        $request = $this->httpClient->createRequest()
            ->setUrl($url)
            ->setMethod($method);
        if (empty($this->accessToken) && stripos($url, 'oauth') === false) {
            $this->fetchAccessToken();
        }
        if (isset($this->accessToken)) {
            $request->addHeaders(['Authorization' => "Bearer $this->accessToken"]);
        }
        if ($data) {
            $request->setData($data);
        }
        if ($headers) {
            $request->addHeaders($headers);
        }
        $response = $request->send();
        $responseContent = Json::decode($response->content, true);
        if (!$response->isOk) {
            Yii::error("RESPONSE ERROR: " . VarDumper::dumpAsString($responseContent) . " \nREQUEST DATA: " . VarDumper::dumpAsString($data));
            trigger_error(VarDumper::dumpAsString($responseContent));
            throw new Exception(VarDumper::dumpAsString($responseContent));
        }
        return $responseContent;
    }

    /**
     * The Safaricom C2B API end point for registering the confirmation
     * and validation URLs.
     *
     * @var string
     */
    protected $urlRegistrationEndPoint = 'mpesa/c2b/v2/registerurl';

    /**
     * The Safaricom C2B API end point for simulating a C2B transaction.
     *
     * @var string
     */
    protected $simulationEndpoint = 'mpesa/c2b/v1/simulate';

    /**
     * The Safaricom C2B API command ID.
     *
     * @var string
     */
    protected $commandID;

    /**
     * Register the confirmation and validation URLs to the Safaricom C2B API.
     *
     * @param string $confirmationUrl
     * @param string $validationUrl
     * @param string $responseType
     * @param null|string $shortCode
     * @return mixed
     * @throws Exception
     * @throws InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    public function registerUrls(string $confirmationUrl, string $validationUrl, string $responseType = 'Completed', string $shortCode = null)
    {
        $parameters = [
            'ShortCode' => is_null($shortCode) ? $this->shortCode : $shortCode,
            'ResponseType' => $responseType,
            'ConfirmationURL' => $confirmationUrl,
            'ValidationURL' => $validationUrl,
        ];

        return $this->call($this->urlRegistrationEndPoint, 'POST', $parameters);
    }

    /**
     * Set the command ID to be used for the transaction.
     *
     * @param string $commandId
     */
    public function setCommandId(string $commandId)
    {
        $this->commandID = $commandId;
    }

    /**
     * Simulate customer payment to a pay bill number through Safaricom C2B API.
     *
     * @param string $phoneNumber
     * @param string $amount
     * @param string $reference
     * @param string|null $shortCode
     * @return mixed
     * @throws Exception
     * @throws InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    public function simulatePaymentToPaybill(string $phoneNumber, string $amount, string $reference, string $shortCode = null)
    {
        $this->setCommandId('CustomerPayBillOnline');

        return $this->simulate($phoneNumber, $amount, $reference, $shortCode);
    }

    /**
     * Simulate customer payment to a till number through Safaricom C2B API.
     *
     * @param string $phoneNumber
     * @param string $amount
     * @param string $reference
     * @param string|null $shortCode
     * @return mixed
     * @throws Exception
     * @throws InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    public function simulatePaymentToTill(string $phoneNumber, string $amount, string $reference, string $shortCode = null)
    {
        $this->setCommandId('CustomerBuyGoodsOnline');

        return $this->simulate($phoneNumber, $amount, $reference, $shortCode);
    }

    /**
     * Send the transaction to be simulated to the Safaricom C2B API.
     *
     * @param $phoneNumber
     * @param $amount
     * @param $reference
     * @param null $shortCode
     * @return mixed
     * @throws Exception
     * @throws InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    protected function simulate($phoneNumber, $amount, $reference, $shortCode = null)
    {
        $data = [
            'ShortCode' => is_null($shortCode) ? $this->shortCode : $shortCode,
            'CommandID' => $this->commandID,
            'Amount' => $amount,
            'Msisdn' => $phoneNumber,
            'BillRefNumber' => $reference,
        ];

        return $this->call($this->simulationEndpoint, 'POST', $data);
    }
}
